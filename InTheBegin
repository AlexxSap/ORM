ORM::SqlBuilder *b = ORM::SqlBuilder::сreateSqliteBuilder();

1. Собирается обобщенная модель запроса (общий интерфейс - класс на каждый тип)
2. Передаётся в конкретный SqlBuilder 
3. конкретный SqlBuilder создаёт строковое представление запроса 

ORM::Query - тонкая оболочка над qt-шным результатом запроса

class TableQuery
{
TableQuery(ORM::SqlBuilder *builder);
ORM::Query exec()
{
builder->parse(this);
if(!builder->isComplete())
{
	return builder->error();
}
return builder->exec();
}
}

class CreateTableQuery : public TableQuery;
class SelectTableQuery : public TableQuery;

enum ColumnType
{
	Int,
	Double,
	Text,
	Date,
	Blob
}

ColumnConstraint
{
enum{
NOT_NULL,
AUTOINCREMENT,
UNIQUE}

DEFAULT(var)

}

				
if(r.isComplete())
{
	ORM::QueryResult res = r.result();
	r.columns();
	while(res.next())
	{
	 qInfo() << res.record(); 
	}
}
else
{
	qInfo() << r.errors();
}


1. Select
1.1. all	
	select(ALL).from("tableName");
	select().from("tableName");

1.2. fields
	select("f1", "f2").from("tableName");

1.3. with case 
	select("f1", "f2").from("tableName").where(notIn("f3", {"jack", "gil", "123"}));
	select("f1", "f2").from("tableName").where(less("f3", 33));
	select("f1", "f2").from("tableName").where(more("f3", Date(2017,3,3)));
	select("f1", "f2").from("tableName").where(equal("f3", bind("id"))).indexedBy("index_name");
	
	select("f1", "f2").from("tableName").where(and(equal("f3", bind("id")), less("f4", bind("d")));

1.4. with first, last, distinct
	select(first("f1")).from("tableName");

1.5. with limit and offset, etc
      .groupBy("f1", "f2")
      .having(more(count(), 2))
      .orderBy(asc("f1"))
	  .indexedBy("index_name")
      .limit(2)
      .offset(1)
	  
1.6. with ag. function (max, min, count)
	select("f1", max("f2")).form("name").groupBy("f1");

1.7. with join
	select(as("A.f1", "af1"), "B.f1").form("table1", "A").innerJoin("table2", "B").on(...)

2. Insert
2.1. simple
	insert("f1", "f2").into("table").values("a", "b");
	insert("f1", "f2").into("table").values(bind("a"), bind("b"));
	
2.2. batch
	insert("f1", "f2").into("table").values("a1", "b1").values("a2", "b2").values("a3", "b3");
2.3. from select

3. Delete
	like select delete().from("tableName")......;

4. create table
	createTable("tableName").addKeyField("f1", INT).addField("f2", DATE);
	createTable("tableName").addField("f1", INT).addField("f2", DATE).setKey("f1", "f2");
	createTable("tableName").addField("f1", INT, {key, notNull, autoIncrement}).addField("f2", DATE);

select(...).from(...).prepare().bindValue(...).bindValue(...).exec()

select(...) - SelectQuery
select(...).from(...) - SelectQuery
select(...).from(...).prepare() - PreparedQuery
select(...).from(...).prepare().bindValue(...).bindValue(...) - BindedQuery
select(...).from(...).prepare().bindValue(...).bindValue(...).exec() - Result




  

